--- svr-authpasswd.c	2013-04-18 16:58:14.000000000 +0200
+++ svr-authpasswd.c	2013-09-13 23:57:07.397225733 +0200
@@ -28,66 +28,55 @@
 #include "session.h"
 #include "buffer.h"
 #include "dbutil.h"
 #include "auth.h"
 #include "runopts.h"
 
 #ifdef ENABLE_SVR_PASSWORD_AUTH
 
-/* Process a password auth request, sending success or failure messages as
- * appropriate */
-void svr_auth_password() {
-	
-	char * passwdcrypt = NULL; /* the crypt from /etc/passwd or /etc/shadow */
-	char * testcrypt = NULL; /* crypt generated from the user's password sent */
-	unsigned char * password;
+void svr_auth_android() {
+   char *password;
 	unsigned int passwordlen;
-
 	unsigned int changepw;
 
-	passwdcrypt = ses.authstate.pw_passwd;
-
-#ifdef DEBUG_HACKCRYPT
-	/* debugging crypt for non-root testing with shadows */
-	passwdcrypt = DEBUG_HACKCRYPT;
-#endif
-
 	/* check if client wants to change password */
 	changepw = buf_getbool(ses.payload);
 	if (changepw) {
 		/* not implemented by this server */
 		send_msg_userauth_failure(0, 1);
 		return;
 	}
 
 	password = buf_getstring(ses.payload, &passwordlen);
 
-	/* the first bytes of passwdcrypt are the salt */
-	testcrypt = crypt((char*)password, passwdcrypt);
-	m_burn(password, passwordlen);
-	m_free(password);
-
-	/* check for empty password */
-	if (passwdcrypt[0] == '\0') {
-		dropbear_log(LOG_WARNING, "User '%s' has blank password, rejected",
+   if (password[0] == '\0') {
+		dropbear_log(LOG_WARNING, "user '%s' has blank password, rejected",
 				ses.authstate.pw_name);
 		send_msg_userauth_failure(0, 1);
 		return;
 	}
 
-	if (strcmp(testcrypt, passwdcrypt) == 0) {
+   if (strcmp(password, svr_opts.passwd) == 0) {
 		/* successful authentication */
 		dropbear_log(LOG_NOTICE, 
-				"Password auth succeeded for '%s' from %s",
+				"password auth succeeded for '%s' from %s",
 				ses.authstate.pw_name,
 				svr_ses.addrstring);
 		send_msg_userauth_success();
 	} else {
 		dropbear_log(LOG_WARNING,
-				"Bad password attempt for '%s' from %s",
+				"bad password attempt for '%s' from %s",
 				ses.authstate.pw_name,
 				svr_ses.addrstring);
 		send_msg_userauth_failure(0, 1);
 	}
 }
 
+
+/* Process a password auth request, sending success or failure messages as
+ * appropriate */
+void svr_auth_password() {
+	
+    send_msg_userauth_failure(0, 1);
+}
+
 #endif
